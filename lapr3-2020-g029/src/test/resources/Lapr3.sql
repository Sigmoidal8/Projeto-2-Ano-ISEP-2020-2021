DROP TABLE "LAPR3_G29"."ADRESS" cascade constraints;
DROP TABLE "LAPR3_G29"."SCOOTER" cascade constraints;
DROP TABLE "LAPR3_G29"."CLIENT" cascade constraints;
DROP TABLE "LAPR3_G29"."PHARMACY" cascade constraints;
DROP TABLE "LAPR3_G29"."PRODUCT" cascade constraints;
DROP TABLE "LAPR3_G29"."COURIER" cascade constraints;
DROP TABLE "LAPR3_G29"."PARKINGLOT" cascade constraints;
DROP TABLE "LAPR3_G29"."DELIVERY" cascade constraints;
DROP TABLE "LAPR3_G29"."INVOICE" cascade constraints;
DROP TABLE "LAPR3_G29"."INVOICE_PRODUCT" cascade constraints;
DROP TABLE "LAPR3_G29"."PHARMACY_PRODUCT" cascade constraints;
DROP TABLE "LAPR3_G29"."DRONE" cascade constraints;

/

--------------------------------------------------------
--  DDL for Table ADRESS
--------------------------------------------------------

  CREATE TABLE "LAPR3_G29"."ADRESS"
   ("ID"   VARCHAR(200),
    "STREET"    VARCHAR(200),
    "DOORNUMBER" INTEGER,
	"POSTALCODE" VARCHAR(200),
	"LOCALITY"   VARCHAR(200),
	"DECIMALDEGREE1" NUMBER,
    "DECIMALDEGREE2" NUMBER
   );

   
   CREATE TABLE "LAPR3_G29"."SCOOTER"
   ("EXCLUSIVENUMBER"   INTEGER,
    "FULLCHARGE"    NUMBER,
	"CURRENTCHARGE" NUMBER,
	"OPERATIONAL"   INTEGER  check("OPERATIONAL" = 0 OR "OPERATIONAL" = 1),    
	"POWER"    NUMBER,
    "PHARMACYID" VARCHAR(200)
    );
   
   CREATE TABLE "LAPR3_G29"."CLIENT"
   ("ID"   VARCHAR(200),
    "NAME"    VARCHAR(200),
	"PASSWORD" VARCHAR(200),
	"EMAIL"   VARCHAR(200),
	"NIF"     VARCHAR(200),
    "CREDITS"  NUMBER,
    "ADRESSID"   VARCHAR(200)   
    );
    
    CREATE TABLE "LAPR3_G29"."PHARMACY"
   ("ID"           VARCHAR(200),
    "DESIGNATION"   VARCHAR(200),
	"EMAIL"        VARCHAR(200),
    "PASSWORD"        VARCHAR(200),
	"ADRESSID"  VARCHAR(200)
    );
    
     CREATE TABLE "LAPR3_G29"."PRODUCT"
   ("ID"    VARCHAR(200),
    "NAME"   VARCHAR(200),
	"PRICE"   NUMBER,
	"WEIGHT"  NUMBER
    );
    
     CREATE TABLE "LAPR3_G29"."COURIER"
   ("NIF"    VARCHAR(200),
    "NAME"    VARCHAR(200),
	"EMAIL"  VARCHAR(200),
	"SOCIALSECURITYNUMBER"  VARCHAR(200),
    "PASSWORD" VARCHAR(200)
    );
    
    CREATE TABLE "LAPR3_G29"."PARKINGLOT"
   ("ID"    VARCHAR(200),
    "LOCALSPOTS"    INTEGER,
	"CHARGESPOTS"  INTEGER,
    "TYPE"         VARCHAR(200),
    "PHARMACYID"   VARCHAR(200)
    );
    
    CREATE TABLE "LAPR3_G29"."DELIVERY"
   ("ID"    VARCHAR(200),
    "DATE_DELIVERY"    DATE,
	"TOTALWEIGHT"  NUMBER,
    "INVOICEID" VARCHAR(200),
    "PHARMACYID" VARCHAR(200)
    );
    
    CREATE TABLE "LAPR3_G29"."INVOICE"
   ("ID"    VARCHAR(200),
    "DATE_INVOICE"    DATE,
	"PRICE"  NUMBER,
	"CLIENTID"  VARCHAR(200)
    );
    
    CREATE TABLE "LAPR3_G29"."INVOICE_PRODUCT"
   ("INVOICEID"    VARCHAR(200),
    "PRODUCTID"    VARCHAR(200),
	"QUANTITY"  INTEGER
    );
    
    CREATE TABLE "LAPR3_G29"."PHARMACY_PRODUCT"
   ("PHARMACYID"    VARCHAR(200),
    "PRODUCTID"    VARCHAR(200),
    "STOCK"     INTEGER
    );
    
        CREATE TABLE "LAPR3_G29"."DRONE"
   ("ID"    INTEGER,
    "FULLCHARGE"    NUMBER,
    "CURRENTCHARGE"     NUMBER,
    "POWER"     NUMBER,
    "PHARMACYID"  VARCHAR(200)
    );
/
--------------------------------------------------------
--  DDL for Index ADRESS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LAPR3_G29"."ADRESS_PK" ON "LAPR3_G29"."ADRESS" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."SCOOTER_PK" ON "LAPR3_G29"."SCOOTER" ("EXCLUSIVENUMBER")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."CLIENT_PK" ON "LAPR3_G29"."CLIENT" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."PHARMACY_PK" ON "LAPR3_G29"."PHARMACY" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."PRODUCT_PK" ON "LAPR3_G29"."PRODUCT" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."COURIER_PK" ON "LAPR3_G29"."COURIER" ("NIF")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."PARKINGLOT_PK" ON "LAPR3_G29"."PARKINGLOT" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."DELIVERY_PK" ON "LAPR3_G29"."DELIVERY" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
  CREATE UNIQUE INDEX "LAPR3_G29"."INVOICE_PK" ON "LAPR3_G29"."INVOICE" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
  
    CREATE UNIQUE INDEX "LAPR3_G29"."DRONE" ON "LAPR3_G29"."DRONE" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS";
/
--------------------------------------------------------
--  Constraints for Table ADRESS
--------------------------------------------------------

  ALTER TABLE "LAPR3_G29"."ADRESS" ADD CONSTRAINT "ADRESS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."SCOOTER" ADD CONSTRAINT "SCOOTER_PK" PRIMARY KEY ("EXCLUSIVENUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."CLIENT" ADD CONSTRAINT "CLIENT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."PHARMACY" ADD CONSTRAINT "PHARMACY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."PRODUCT" ADD CONSTRAINT "PRODUCT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."COURIER" ADD CONSTRAINT "COURIER_PK" PRIMARY KEY ("NIF")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."PARKINGLOT" ADD CONSTRAINT "PARKINGLOT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."DELIVERY" ADD CONSTRAINT "DELIVERY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."INVOICE" ADD CONSTRAINT "INVOICE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."INVOICE_PRODUCT" ADD CONSTRAINT "INVOICE_PRODUCT_PK" PRIMARY KEY ("INVOICEID","PRODUCTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
  ALTER TABLE "LAPR3_G29"."PHARMACY_PRODUCT" ADD CONSTRAINT "PHARMACY_PRODUCT_PK" PRIMARY KEY ("PHARMACYID","PRODUCTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
    ALTER TABLE "LAPR3_G29"."DRONE" ADD CONSTRAINT "DRONE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  TABLESPACE "USERS"  ENABLE;
  
/
    ALTER TABLE "LAPR3_G29"."ADRESS" MODIFY ("ID" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."SCOOTER" MODIFY ("EXCLUSIVENUMBER" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."CLIENT" MODIFY ("ID" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."PHARMACY" MODIFY ("ID" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."PRODUCT" MODIFY ("ID" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."COURIER" MODIFY ("NIF" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."PARKINGLOT" MODIFY ("ID" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."DELIVERY" MODIFY ("ID" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."INVOICE" MODIFY ("ID" NOT NULL ENABLE);
    ALTER TABLE "LAPR3_G29"."DRONE" MODIFY ("ID" NOT NULL ENABLE);
/

ALTER TABLE "LAPR3_G29"."CLIENT" ADD CONSTRAINT "ADRESSCLIENT_FK"  FOREIGN KEY ("ADRESSID")  REFERENCES "ADRESS"("ID");
ALTER TABLE "LAPR3_G29"."PHARMACY" ADD CONSTRAINT "ADRESSPHARMACY_FK"  FOREIGN KEY ("ADRESSID")  REFERENCES "ADRESS"("ID");
ALTER TABLE "LAPR3_G29"."PARKINGLOT" ADD CONSTRAINT "PARKINGLOTPHARMACY_FK"  FOREIGN KEY ("PHARMACYID")  REFERENCES "PHARMACY"("ID");
ALTER TABLE "LAPR3_G29"."SCOOTER" ADD CONSTRAINT "PHARMACYSCOOTER_FK"  FOREIGN KEY ("PHARMACYID")  REFERENCES "PHARMACY"("ID");
ALTER TABLE "LAPR3_G29"."DELIVERY" ADD CONSTRAINT "DELIVERYINVOICE_FK"  FOREIGN KEY ("INVOICEID")  REFERENCES "INVOICE"("ID");
ALTER TABLE "LAPR3_G29"."DELIVERY" ADD CONSTRAINT "DELIVERYPHARMACY_FK"  FOREIGN KEY ("PHARMACYID")  REFERENCES "PHARMACY"("ID");
ALTER TABLE "LAPR3_G29"."INVOICE" ADD CONSTRAINT "INVOICECLIENT_FK"  FOREIGN KEY ("CLIENTID")  REFERENCES "CLIENT"("ID");
ALTER TABLE "LAPR3_G29"."INVOICE_PRODUCT" ADD CONSTRAINT "INVOICEPRODUCTINVOICE_FK"  FOREIGN KEY ("INVOICEID")  REFERENCES "INVOICE"("ID");
ALTER TABLE "LAPR3_G29"."INVOICE_PRODUCT" ADD CONSTRAINT "INVOICEPRODUCTPRODUCT_FK"  FOREIGN KEY ("PRODUCTID")  REFERENCES "PRODUCT"("ID");
ALTER TABLE "LAPR3_G29"."PHARMACY_PRODUCT" ADD CONSTRAINT "PHARMACY_PRODUCTPHARMACY_FK"  FOREIGN KEY ("PHARMACYID")  REFERENCES "PHARMACY"("ID");
ALTER TABLE "LAPR3_G29"."PHARMACY_PRODUCT" ADD CONSTRAINT "PHARMACY_PRODUCTPRODUCT_FK"  FOREIGN KEY ("PRODUCTID")  REFERENCES "PRODUCT"("ID");
ALTER TABLE "LAPR3_G29"."DRONE" ADD CONSTRAINT "DRONE_PHARMACY_FK"  FOREIGN KEY ("PHARMACYID")  REFERENCES "PHARMACY"("ID");


--------------------------------------------------------
--  Functions
--------------------------------------------------------

-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getAdress(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curAdress SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curAdress 
    FOR SELECT * FROM ADRESS WHERE ADRESS.ID = getAdress.id; 
    RETURN curAdress; 
  END;
/

CREATE OR REPLACE PROCEDURE addAdress(ID VARCHAR, STREET VARCHAR, DOORNUMBER INTEGER, POSTALCODE VARCHAR, LOCALITY VARCHAR, DECIMALDEGREE1 NUMBER, DECIMALDEGREE2 NUMBER) 
AS
BEGIN
  INSERT INTO ADRESS VALUES(id, street,DOORNUMBER, postalcode, locality, decimaldegree1, decimaldegree2);   
END;
/

CREATE OR REPLACE PROCEDURE removeAdress(id VARCHAR) 
IS
BEGIN
  DELETE FROM ADRESS WHERE ADRESS.ID = removeAdress.id;
END;
/

CREATE OR REPLACE PROCEDURE updateAdress(ID VARCHAR, STREET VARCHAR,DOORNUMBER INTEGER, POSTALCODE VARCHAR, LOCALITY VARCHAR, DECIMALDEGREE1 NUMBER, DECIMALDEGREE2 NUMBER) 
AS
BEGIN
    UPDATE ADRESS SET id = updateAdress.id, street = updateAdress.street, DOORNUMBER = updateAdress.DOORNUMBER, postalcode = updateAdress.postalcode, locality = updateAdress.locality, decimaldegree1 = updateAdress.decimaldegree1, decimaldegree2 = updateAdress.decimaldegree2 
    where id = updateAdress.id;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getScooter(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curScooter SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curScooter 
    FOR SELECT * FROM SCOOTER WHERE SCOOTER.EXCLUSIVENUMBER = getScooter.id; 
    RETURN curScooter; 
  END;
/

CREATE OR REPLACE PROCEDURE addScooter(EXCLUSIVENUMBER VARCHAR, FULLCHARGE NUMBER, CURRENTCHARGE NUMBER, OPERATIONAL INTEGER, POWER NUMBER, PHARMACYID VARCHAR) 
AS
BEGIN
  INSERT INTO SCOOTER VALUES(EXCLUSIVENUMBER, FULLCHARGE, CURRENTCHARGE, OPERATIONAL, POWER, PHARMACYID);   
END;
/

CREATE OR REPLACE PROCEDURE removeScooter(EXCLUSIVENUMBER VARCHAR) 
IS
BEGIN
  DELETE FROM SCOOTER WHERE SCOOTER.EXCLUSIVENUMBER = removeScooter.EXCLUSIVENUMBER;
END;
/

CREATE OR REPLACE PROCEDURE updateScooter(EXCLUSIVENUMBER VARCHAR, FULLCHARGE NUMBER, CURRENTCHARGE NUMBER, OPERATIONAL INTEGER, POWER NUMBER, PHARMACYID VARCHAR) 
AS
BEGIN
    UPDATE SCOOTER SET EXCLUSIVENUMBER = updateScooter.EXCLUSIVENUMBER, FULLCHARGE = updateScooter.FULLCHARGE, CURRENTCHARGE = updateScooter.CURRENTCHARGE, OPERATIONAL = updateScooter.OPERATIONAL, POWER = updateScooter.POWER, PHARMACYID = updateScooter.PHARMACYID
    where EXCLUSIVENUMBER = updateScooter.EXCLUSIVENUMBER;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getClient(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curClient SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curClient 
    FOR SELECT * FROM CLIENT WHERE CLIENT.ID = getClient.id; 
    RETURN curClient; 
  END;
/

CREATE OR REPLACE PROCEDURE addClient(ID VARCHAR, NAME VARCHAR, PASSWORD VARCHAR, EMAIL VARCHAR, NIF VARCHAR, CREDITS NUMBER, ADRESSID VARCHAR) 
AS
BEGIN
  INSERT INTO CLIENT VALUES(ID, NAME, PASSWORD, EMAIL, NIF, CREDITS, ADRESSID);   
END;
/

CREATE OR REPLACE PROCEDURE removeClient(ID VARCHAR) 
IS
BEGIN
  DELETE FROM CLIENT WHERE CLIENT.id = removeClient.ID;
END;
/

CREATE OR REPLACE PROCEDURE updateClient(ID VARCHAR, NAME VARCHAR, PASSWORD VARCHAR, EMAIL VARCHAR, NIF VARCHAR, CREDITS NUMBER, ADRESSID VARCHAR) 
AS
BEGIN
    UPDATE CLIENT SET ID = updateClient.ID, NAME = updateClient.NAME, PASSWORD = updateClient.PASSWORD, EMAIL = updateClient.EMAIL, NIF = updateClient.NIF, CREDITS = updateClient.CREDITS, ADRESSID = updateClient.ADRESSID
    where ID = updateClient.ID;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getPharmacy(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curPharmacy SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curPharmacy 
    FOR SELECT * FROM PHARMACY WHERE PHARMACY.ID = getPharmacy.id; 
    RETURN curPharmacy; 
  END;
/


CREATE OR REPLACE PROCEDURE addPharmacy(ID VARCHAR, DESIGNATION VARCHAR, EMAIL VARCHAR,PASSWORD VARCHAR, ADRESSID VARCHAR) 
AS
BEGIN
  INSERT INTO PHARMACY VALUES(ID, DESIGNATION, EMAIL, PASSWORD, ADRESSID);   
END;
/

CREATE OR REPLACE PROCEDURE removePharmacy(ID VARCHAR) 
IS
BEGIN
  DELETE FROM PHARMACY WHERE PHARMACY.id = removePharmacy.ID;
END;
/

CREATE OR REPLACE PROCEDURE updatePharmacy(ID VARCHAR, DESIGNATION VARCHAR, EMAIL VARCHAR,PASSWORD VARCHAR, ADRESSID VARCHAR) 
AS
BEGIN
    UPDATE PHARMACY SET ID = updatePharmacy.ID, DESIGNATION = updatePharmacy.DESIGNATION, EMAIL = updatePharmacy.EMAIL,PASSWORD = updatePharmacy.PASSWORD, ADRESSID = updatePharmacy.ADRESSID
    where ID = updatePharmacy.ID;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getProduct(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curProduct SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curProduct 
    FOR SELECT * FROM PRODUCT WHERE PRODUCT.ID = getProduct.id; 
    RETURN curProduct; 
  END;
/

CREATE OR REPLACE PROCEDURE addProduct(ID VARCHAR, NAME VARCHAR, PRICE NUMBER, WEIGHT NUMBER) 
AS
BEGIN
  INSERT INTO PRODUCT VALUES(ID, NAME, PRICE, WEIGHT);   
END;
/

CREATE OR REPLACE PROCEDURE addProductPharmacy(PHARMACYID VARCHAR, PRODUCTID VARCHAR,STOCK INTEGER) 
AS
BEGIN
  INSERT INTO PHARMACY_PRODUCT VALUES(PHARMACYID, PRODUCTID, STOCK);   
END;
/


CREATE OR REPLACE PROCEDURE removeProduct(ID VARCHAR) 
IS
BEGIN
  DELETE FROM PRODUCT WHERE PRODUCT.id = removeProduct.ID;
END;
/

CREATE OR REPLACE PROCEDURE updateProduct(ID VARCHAR, NAME VARCHAR, PRICE NUMBER, WEIGHT NUMBER) 
AS
BEGIN
    UPDATE PRODUCT SET ID = updateProduct.ID, NAME = updateProduct.NAME, PRICE = updateProduct.PRICE, WEIGHT = updateProduct.WEIGHT
    where ID = updateProduct.ID;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getCourier(nif VARCHAR)
RETURN SYS_REFCURSOR
AS
  curCourier SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curCourier 
    FOR SELECT * FROM COURIER WHERE COURIER.NIF = getCourier.nif; 
    RETURN curCourier; 
  END;
/

CREATE OR REPLACE PROCEDURE addCourier(NIF VARCHAR, NAME VARCHAR, EMAIL VARCHAR, SOCIALSECURITYNUMBER VARCHAR, PASSWORD VARCHAR) 
AS
BEGIN
  INSERT INTO COURIER VALUES(NIF, NAME, EMAIL, SOCIALSECURITYNUMBER,PASSWORD);   
END;
/

CREATE OR REPLACE PROCEDURE removeCourier(NIF VARCHAR) 
IS
BEGIN
  DELETE FROM COURIER WHERE COURIER.nif = removeCourier.NIF;
END;
/

CREATE OR REPLACE PROCEDURE updateCourier(NIF VARCHAR, NAME VARCHAR, EMAIL VARCHAR, SOCIALSECURITYNUMBER VARCHAR, PASSWORD VARCHAR) 
AS
BEGIN
    UPDATE COURIER SET NIF = updateCourier.NIF, NAME = updateCourier.NAME, EMAIL = updateCourier.EMAIL, SOCIALSECURITYNUMBER = updateCourier.SOCIALSECURITYNUMBER, PASSWORD = updateCourier.PASSWORD
    where NIF = updateCourier.NIF;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getParkingLot(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curParkingLot SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curParkingLot 
    FOR SELECT * FROM PARKINGLOT WHERE PARKINGLOT.id = getParkingLot.id; 
    RETURN curParkingLot; 
  END;
/

CREATE OR REPLACE PROCEDURE addParkingLot(ID VARCHAR, LOCALSPOTS INTEGER, CHARGESPOTS INTEGER, TYPE VARCHAR, PHARMACYID VARCHAR) 
AS
BEGIN
  INSERT INTO PARKINGLOT VALUES(ID, LOCALSPOTS, CHARGESPOTS, TYPE,PHARMACYID); 
END;
/

CREATE OR REPLACE PROCEDURE removeParkingLot(ID VARCHAR) 
IS
BEGIN
  DELETE FROM PARKINGLOT WHERE PARKINGLOT.ID = removeParkingLot.ID;
END;
/

CREATE OR REPLACE PROCEDURE updateParkingLot(ID VARCHAR, LOCALSPOTS INTEGER, CHARGESPOTS INTEGER, TYPE VARCHAR, PHARMACYID VARCHAR) 
AS
BEGIN
    UPDATE PARKINGLOT SET ID = updateParkingLot.ID, LOCALSPOTS = updateParkingLot.LOCALSPOTS, CHARGESPOTS = updateParkingLot.CHARGESPOTS, TYPE = updateParkingLot.TYPE, PHARMACYID = updateParkingLot.PHARMACYID
    where ID = updateParkingLot.ID;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getDelivery(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curDelivery SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curDelivery 
    FOR SELECT * FROM DELIVERY WHERE DELIVERY.id = getDelivery.id; 
    RETURN curDelivery; 
  END;
/

CREATE OR REPLACE PROCEDURE addDelivery(ID VARCHAR, DATE2 DATE, TOTALWEIGHT NUMBER, INVOICEID VARCHAR, PHARMACYID VARCHAR) 
AS
BEGIN
  INSERT INTO DELIVERY VALUES(ID, DATE2, TOTALWEIGHT, INVOICEID,PHARMACYID);   
END;
/

CREATE OR REPLACE PROCEDURE removeDelivery(ID VARCHAR) 
IS
BEGIN
  DELETE FROM DELIVERY WHERE DELIVERY.ID = removeDelivery.ID;
END;
/

CREATE OR REPLACE PROCEDURE updateDelivery(ID VARCHAR, DATE2 DATE, TOTALWEIGHT NUMBER, INVOICEID VARCHAR, PHARMACYID VARCHAR) 
AS
BEGIN
    UPDATE DELIVERY SET ID = updateDelivery.ID, DATE_DELIVERY = updateDelivery.DATE2, TOTALWEIGHT = updateDelivery.TOTALWEIGHT, INVOICEID = updateDelivery.INVOICEID, PHARMACYID = updateDelivery.PHARMACYID
    where ID = updateDelivery.ID;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getInvoice(id VARCHAR)
RETURN SYS_REFCURSOR
AS
  curInvoice SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curInvoice 
    FOR SELECT * FROM INVOICE WHERE INVOICE.id = getInvoice.id; 
    RETURN curInvoice; 
  END;
/

CREATE OR REPLACE PROCEDURE addInvoice(ID VARCHAR, DATE2 DATE, PRICE NUMBER, CLIENTID VARCHAR) 
AS
BEGIN
  INSERT INTO INVOICE VALUES(ID, DATE2, PRICE, CLIENTID);   
END;
/

CREATE OR REPLACE PROCEDURE removeInvoice(ID VARCHAR) 
IS
BEGIN
  DELETE FROM INVOICE WHERE INVOICE.ID = removeInvoice.ID;
END;
/

CREATE OR REPLACE PROCEDURE updateInvoice(ID VARCHAR, DATE2 DATE, PRICE NUMBER, CLIENTID VARCHAR) 
AS
BEGIN
    UPDATE INVOICE SET ID = updateInvoice.ID, DATE_INVOICE = updateInvoice.DATE2, PRICE = updateInvoice.PRICE, CLIENTID = updateInvoice.CLIENTID
    where ID = updateInvoice.ID;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getInvoice_Product(INVOICEID VARCHAR, PRODUCTID varchar)
RETURN SYS_REFCURSOR
AS
  curInvoice_Product SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curInvoice_Product 
    FOR SELECT * FROM INVOICE_PRODUCT WHERE INVOICE_PRODUCT.INVOICEID = getInvoice_Product.INVOICEID and INVOICE_PRODUCT.PRODUCTID = getInvoice_Product.PRODUCTID; 
    RETURN curInvoice_Product; 
  END;
/

CREATE OR REPLACE PROCEDURE addInvoice_Product(INVOICEID VARCHAR, PRODUCTID varchar, QUANTITY INTEGER) 
AS
BEGIN
  INSERT INTO INVOICE_PRODUCT VALUES(INVOICEID, PRODUCTID, QUANTITY);   
END;
/

CREATE OR REPLACE PROCEDURE removeInvoice_Product(INVOICEID VARCHAR, PRODUCTID varchar) 
IS
BEGIN
  DELETE FROM INVOICE_PRODUCT WHERE INVOICE_PRODUCT.INVOICEID = removeInvoice_Product.PRODUCTID AND INVOICE_PRODUCT.PRODUCTID = removeInvoice_Product.PRODUCTID;
END;
/

CREATE OR REPLACE PROCEDURE updateInvoice_Product(INVOICEID VARCHAR, PRODUCTID varchar, QUANTITY INTEGER) 
AS
BEGIN
    UPDATE INVOICE_PRODUCT SET INVOICEID = updateInvoice_Product.INVOICEID, PRODUCTID = updateInvoice_Product.PRODUCTID, QUANTITY = updateInvoice_Product.QUANTITY
    where INVOICEID = updateInvoice_Product.INVOICEID AND PRODUCTID = updateInvoice_Product.PRODUCTID;
END;
/


-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getPharmacy_Product(PHARMACYID VARCHAR, PRODUCTID varchar)
RETURN SYS_REFCURSOR
AS
  curPharmacy_Product SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curPharmacy_Product 
    FOR SELECT * FROM PHARMACY_PRODUCT WHERE PHARMACY_PRODUCT.PHARMACYID = getPharmacy_Product.PHARMACYID and PHARMACY_PRODUCT.PRODUCTID = getPharmacy_Product.PRODUCTID; 
    RETURN curPharmacy_Product; 
  END;
/

CREATE OR REPLACE PROCEDURE addPharmacy_Product(PHARMACYID VARCHAR, PRODUCTID varchar, STOCK INTEGER) 
AS
BEGIN
  INSERT INTO PHARMACY_PRODUCT VALUES(PHARMACYID, PRODUCTID, STOCK);   
END;
/

CREATE OR REPLACE PROCEDURE removePharmacy_Product(PHARMACYID VARCHAR, PRODUCTID varchar) 
IS
BEGIN
  DELETE FROM PHARMACY_PRODUCT WHERE PHARMACY_PRODUCT.PHARMACYID = removePharmacy_Product.PHARMACYID AND PHARMACY_PRODUCT.PRODUCTID = removePharmacy_Product.PRODUCTID;
END;
/

CREATE OR REPLACE PROCEDURE updateStock(PHARMACYID VARCHAR, PRODUCTID varchar, STOCK INTEGER) 
AS
BEGIN
    UPDATE PHARMACY_PRODUCT SET STOCK = updateStock.STOCK
    where PHARMACYID = updateStock.PHARMACYID AND PRODUCTID = updateStock.PRODUCTID;
END;
/

create or replace FUNCTION getStock(PHARMACYID VARCHAR, PRODUCTID VARCHAR) return INTEGER
AS
v_stock INTEGER;
BEGIN
    Select stock into v_stock
    from PHARMACY_PRODUCT pp where pp.PHARMACYID = getStock.PHARMACYID and pp.PRODUCTID = getStock.PRODUCTID;
return v_stock;
END;
/

create or replace FUNCTION getExclusiveNumber return int
AS
v_maxNumber int;
BEGIN
    Select max(exclusiveNumber)+1 into v_maxNumber from Scooter;
return v_maxNumber;
END;
/

-- Fun��o retorna a refer�ncia de um objeto cursor
CREATE OR REPLACE FUNCTION getDrone(ID INTEGER)
RETURN SYS_REFCURSOR
AS
  curDrone    SYS_REFCURSOR;	-- vari�vel de cursor do tipo predefinido SYS_REFCURSOR 
BEGIN
  -- criar um objeto cursor e armazenar a refer�ncia desse objeto na vari�vel de cursor curSailor
  OPEN curDrone 
    FOR SELECT * FROM DRONE WHERE DRONE.ID = getDrone.ID;
    RETURN curDrone; 
  END;
/

CREATE OR REPLACE PROCEDURE addDrone(ID INTEGER, FULLCHARGE NUMBER, CURRENTCHARGE NUMBER, POWER NUMBER, PHARMACYID VARCHAR) 
AS
BEGIN
  INSERT INTO DRONE VALUES(ID, FULLCHARGE, CURRENTCHARGE,POWER,PHARMACYID);   
END;
/

CREATE OR REPLACE PROCEDURE removeDrone(ID INTEGER) 
IS
BEGIN
  DELETE FROM DRONE WHERE DRONE.ID = removeDrone.ID;
END;
/

CREATE OR REPLACE PROCEDURE updateDrone(ID INTEGER, FULLCHARGE NUMBER, CURRENTCHARGE NUMBER, POWER NUMBER, PHARMACYID VARCHAR) 
AS
BEGIN
    UPDATE DRONE SET ID = updateDrone.ID, FULLCHARGE = updateDrone.FULLCHARGE, CURRENTCHARGE = updateDrone.CURRENTCHARGE, POWER = updateDrone.POWER, PHARMACYID = updateDrone.PHARMACYID
    where ID = updateDrone.ID;
END;
/